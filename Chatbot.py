import os
import streamlit as st
from anthropic import Anthropic
import requests
from io import BytesIO

API_URL = "https://api-inference.huggingface.co/models/facebook/mms-tts-ory"

def query(payload):
    headers = {"Authorization": f"Bearer {st.secrets['HUGGINGFACE_API_KEY']}"}
    response = requests.post(API_URL, headers=headers, json=payload)
    if response.status_code == 200:
        print("Audio generation successful")
        return response.content
    else:
        print(f"Error generating audio: {response.status_code} - {response.text}")
        return None

def play_audio(text):
    print("Entering play_audio function")
    with st.spinner("Generating audio..."):
        audio_bytes = query({"inputs": text})
        if audio_bytes:
            print("Received audio bytes")
            audio_bytes = BytesIO(audio_bytes)
            audio_bytes.seek(0)
            st.markdown("### Audio Output:")
            audio_player = st.audio(audio_bytes, format='audio/wav')
            print(f"Audio player: {audio_player}")
        else:
            st.error("Failed to generate audio.")

st.title("Odia Lingua ЁЯРЪЁЯдЦ")
st.subheader("рмЖрмкрмгрмЩрнНрмХрм░ рмУрмбрм╝рм┐рмЖ рммрм╛рм░рнНрмдрнНрмдрм╛рм│рм╛рмк рм╕рм╣рм╛рнЯрмХ! ЁЯМ║ЁЯФе")

client = Anthropic(api_key=st.secrets["ANTHROPIC_API_KEY"])

if "anthropic_model" not in st.session_state:
    st.session_state["anthropic_model"] = "claude-3-opus-20240229"

if "messages" not in st.session_state:
    st.session_state.messages = []

initial_prompt = " "

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("рмХрнЗрморм┐рмдрм┐ рмЕрмЫрмирнНрмдрм┐? рмЖрмкрмгрмЩрнНрмХ рмкрнНрм░рм╢рнНрмирмХрнБ рмПрмарм╛рм░рнЗ рм▓рнЗрмЦрмирнНрмдрнБ..."):
    if st.session_state.messages and st.session_state.messages[-1]["role"] == "user":
        st.session_state.messages[-1]["content"] += "\n" + prompt
    else:
        st.session_state.messages.append({"role": "user", "content": prompt})

    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        messages = st.session_state.messages
        if len(messages) > 1 and messages[-1]["role"] == "user" and messages[-2]["role"] == "user":
            messages.pop(-1)

        with st.spinner('Generating response...'):
            stream = client.messages.create(
                model=st.session_state["anthropic_model"],
                max_tokens=1024,
                system="""рмЖрмкрмг рмПрмХ рмУрмбрм╝рм┐рмЖ рмнрм╛рм╖рм╛ рммрм╛рм░рнНрмдрнНрмдрм╛рм│рм╛рмк AI рм╕рм╣рм╛рнЯрмХред рмЖрмкрмг рмХрнЗрммрм│ рмУрмбрм╝рм┐рмЖ рмнрм╛рм╖рм╛рм░рнЗ рмпрнЛрмЧрм╛рмпрнЛрмЧ рмХрм░рм┐рммрнЗ рмПрммрмВ рмнрм╛рм╖рм╛рм░ рммрнНрнЯрм╛рмХрм░рмг рмирм┐рнЯрмо рмПрммрмВ рм╕рм╛рмВрм╕рнНрмХрнГрмдрм┐рмХ рмЪрм│рмгрнАрмЧрнБрмбрм╝рм┐рмХрнБ рмЕрмирнБрм╕рм░рмг рмХрм░рм┐рммрнЗред рмЖрмкрмгрмЩрнНрмХрм░ рмкрнНрм░рмдрм┐рмХрнНрм░рм┐рнЯрм╛рмЧрнБрмбрм╝рм┐рмХ рммрм┐рмирморнНрм░, рм╕рморнНрморм╛рмирмЬрмирмХ рмПрммрмВ рмУрмбрм╝рм┐рмЖ рмнрм╛рм╖рм╛рмнрм╛рм╖рнА рмкрнНрм░рнЗрмХрнНрм╖рм╛рмкрмЯрмХрнБ рмЕрмирнБрмХрнВрм│ рм╣рнЗрммрм╛ рмЙрмЪрм┐рмдрнНред рмЖрмкрмгрмЩрнНрмХрм░ рмУрмбрм╝рм┐рм╢рм╛ рмУ рмУрмбрм╝рм┐рмЖ рмнрм╛рм╖рм╛ рм╕рморнНрмкрм░рнНрмХрм░рнЗ рмЧрмнрнАрм░ рммрнБрмЭрм╛рмормгрм╛ рм░рм╣рм┐рмЫрм┐ рмПрммрмВ рмЖрмкрмг рммрм┐рмнрм┐рмирнНрми рммрм┐рм╖рнЯ рмЙрмкрм░рнЗ рмЖрм▓рнЛрмЪрмирм╛ рмХрм░рм┐рмкрм╛рм░рм┐рммрнЗред рммрнНрнЯрммрм╣рм╛рм░рмХрм╛рм░рнАрмЩрнНрмХ рмЗрмирмкрнБрмЯрнНтАМрмХрнБ рмкрнНрм░рмдрм┐рмХрнНрм░рм┐рнЯрм╛ рмХрм░рм┐рммрм╛ рм╕рморнЯрм░рнЗ, рмЖрмкрмг рмкрнНрм░рм╕рмЩрнНрмЧ рммрмЬрм╛рнЯ рм░рмЦрм┐рммрм╛ рмкрм╛рмЗрмБ рммрнНрнЯрммрм╣рм╛рм░рмХрм╛рм░рнАрмЩрнНрмХ рммрм╛рм░рнНрмдрнНрмдрм╛рмХрнБ рмЖрмкрмгрмЩрнНрмХ рмкрнНрм░рмдрм┐рмХрнНрм░рм┐рнЯрм╛рм░рнЗ рм╕рм╛рморм┐рм▓ рмХрм░рм┐рммрнЗ рмПрммрмВ рмкрнНрм░рм╛рмХрнГрмдрм┐рмХ рм╢рнБрмгрм╛рмпрм╛рмЙрмерм┐рммрм╛ рмкрнНрм░рмдрм┐рмХрнНрм░рм┐рнЯрм╛ рмкрнНрм░рмжрм╛рми рмХрм░рм┐рммрнЗред reply within 100 words always""",
                messages=messages,
                stream=True,
            )

            response = ""
            for event in stream:
                if event.type == "content_block_delta":
                    response += event.delta.text

            if response:
                st.markdown(response)
                play_audio = st.button("ЁЯЧгя╕П Play Audio", on_click=play_audio, args=(response,))
            st.session_state.messages.append({"role": "assistant", "content": response})
