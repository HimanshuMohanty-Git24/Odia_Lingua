import os
import streamlit as st
from groq import Groq
import requests
from io import BytesIO
from langchain.utilities import GoogleSearchAPIWrapper

API_URL = "https://api-inference.huggingface.co/models/facebook/mms-tts-ory"
#change the title of  streamlit app
st.set_page_config(page_title="Odia Lingua ЁЯРЪЁЯдЦ", page_icon="ЁЯРЪ", layout="centered", initial_sidebar_state="collapsed")

def query(payload):
    headers = {"Authorization": f"Bearer {st.secrets['HUGGINGFACE_API_KEY']}"}
    response = requests.post(API_URL, headers=headers, json=payload)
    if response.status_code == 200:
        print("Audio generation successful")
        return response.content
    else:
        print(f"Error generating audio: {response.status_code} - {response.text}")
        return None

def play_audio(text):
    print("Entering play_audio function")
    with st.spinner("Generating audio..."):
        audio_bytes = query({"inputs": text})
        if audio_bytes:
            print("Received audio bytes")
            audio_bytes = BytesIO(audio_bytes)
            audio_bytes.seek(0)
            st.markdown("### Audio Output:")
            audio_player = st.audio(audio_bytes, format='audio/wav')
            print(f"Audio player: {audio_player}")
        else:
            st.error("Failed to generate audio.")

def search_google(query):
    print(f"Searching Google for: {query}")  # Debug print
    search = GoogleSearchAPIWrapper()
    results = search.results(query, num_results=3)
    summary = ""
    for i, result in enumerate(results, 1):
        summary += f"{i}. {result['title']}: {result['snippet']}\n\n"
    
    print("Search Results:")  # Debug print
    print(summary)  # Debug print
    
    return summary[:500]  # Limit to 500 characters

st.title("Odia Lingua ЁЯРЪЁЯдЦ")
st.subheader("рмЖрмкрмгрмЩрнНрмХрм░ рмУрмбрм╝рм┐рмЖ рммрм╛рм░рнНрмдрнНрмдрм╛рм│рм╛рмк рм╕рм╣рм╛рнЯрмХ! ЁЯМ║ЁЯФе")

client = Groq(api_key=st.secrets["GROQ_API_KEY"])

if "groq_model" not in st.session_state:
    st.session_state["groq_model"] = "llama-3.1-70b-versatile"

if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("рнЗрмХрморм┐рмдрм┐ рмЕрмЫрмирнНрмдрм┐? рмЖрмкрмгрмЩрнНрмХ рмкрнНрм░рм╢рнНрмирмХрнБ рмПрмарм╛рнЗрм░ рнЗрм▓рмЦрмирнНрмдрнБ..."):
    if st.session_state.messages and st.session_state.messages[-1]["role"] == "user":
        st.session_state.messages[-1]["content"] += "\n" + prompt
    else:
        st.session_state.messages.append({"role": "user", "content": prompt})
    
    with st.chat_message("user"):
        st.markdown(prompt)
    
    with st.chat_message("assistant"):
        messages = st.session_state.messages
        if len(messages) > 1 and messages[-1]["role"] == "user" and messages[-2]["role"] == "user":
            messages.pop(-1)
        
        with st.spinner('Searching for relevant information...'):
            search_results = search_google(prompt)
        
        with st.spinner('Generating response...'):
            system_prompt = f"""рмЖрмкрмг рмПрмХ рмУрмбрм╝рм┐рмЖ рмнрм╛рм╖рм╛ рммрм╛рм░рнНрмдрнНрмдрм╛рм│рм╛рмк AI рм╕рм╣рм╛рнЯрмХред рмЖрмкрмг рнЗрмХрммрм│ рмУрмбрм╝рм┐рмЖ рмнрм╛рм╖рм╛рнЗрм░
                рнЗрмпрм╛рмЧрм╛рнЗрмпрм╛рмЧ рмХрм░рм┐рнЗрмм рмПрммрмВ рмнрм╛рм╖рм╛рм░ рммрнНрнЯрм╛рмХрм░рмг рмирм┐рнЯрмо рмПрммрмВ рм╕рм╛рмВрм╕рнНрмХрнГрмдрм┐рмХ рмЪрм│рмгрнАрмЧрнБрмбрм╝рм┐рмХрнБ рмЕрмирнБрм╕рм░рмг рмХрм░рм┐рнЗрммред рмЖрмкрмгрмЩрнНрмХрм░ рмкрнНрм░рмдрм┐рмХрнНрм░рм┐рнЯрм╛рмЧрнБрмбрм╝рм┐рмХ
                рммрм┐рмирморнНрм░, рм╕рморнНрморм╛рмирмЬрмирмХ рмПрммрмВ рмУрмбрм╝рм┐рмЖ рмнрм╛рм╖рм╛рмнрм╛рм╖рнА рмкрнНрнЗрм░рмХрнНрм╖рм╛рмкрмЯрмХрнБ рмЕрмирнБрмХрнВрм│ рнЗрм╣рммрм╛ рмЙрмЪрм┐рмдрнНред рмЖрмкрмгрмЩрнНрмХрм░ рмУрмбрм╝рм┐рм╢рм╛ рмУ рмУрмбрм╝рм┐рмЖ рмнрм╛рм╖рм╛ рм╕рморнНрмкрм░рнНрмХрнЗрм░
                рмЧрмнрнАрм░ рммрнБрмЭрм╛рмормгрм╛ рм░рм╣рм┐рмЫрм┐ рмПрммрмВ рмЖрмкрмг рммрм┐рмнрм┐рмирнНрми рммрм┐рм╖рнЯ рмЙрмкрнЗрм░ рмЖрнЗрм▓рм╛рмЪрмирм╛ рмХрм░рм┐рмкрм╛рм░рм┐рнЗрммред

                рмирм┐рморнНрмирм▓рм┐рмЦрм┐рмд рмирм┐рм░рнНрмжрнНрмжрнЗрм╢рмЧрнБрмбрм╝рм┐рмХрнБ рмЕрмирнБрм╕рм░рмг рмХрм░рмирнНрмдрнБ:
                1. рм╕рм░рнНрммрмжрм╛ рм╕рморнНрмкрнВрм░рнНрмгрнНрмг рмПрммрмВ рм╕рнБрм╕рмЩрнНрмЧрмд рммрм╛рмХрнНрнЯ рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рмирнНрмдрнБред рмЕрм╕рморнНрмкрнВрм░рнНрмгрнНрмг рммрм╛ рмЕрм░рнНрмерм╣рнАрми рм╢рммрнНрмж рммрм╛ рмЕрмХрнНрм╖рм░ рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рмирнНрмдрнБ рмирм╛рм╣рм┐рмБред
                2. рмкрнНрм░рмдрнНрнЯрнЗрмХ рммрм╛рмХрнНрнЯ рмПрмХ рм╕рморнНрмкрнВрм░рнНрмгрнНрмг рммрм┐рмЪрм╛рм░ рммрнНрнЯрмХрнНрмд рмХрм░рм┐рммрм╛ рмЙрмЪрм┐рмдред
                3. рмЖрмкрмгрмЩрнНрмХрм░ рмЙрмдрнНрмдрм░ рм╕рнНрмкрм╖рнНрмЯ, рм╕рмарм┐рмХрнН рмПрммрмВ рмкрнНрм░рм╛рм╕рмЩрнНрмЧрм┐рмХ рм╣рнЗрммрм╛ рмЖрммрм╢рнНрнЯрмХред
                4. рмкрнНрм░рм╢рнНрмирм░ рм╕рморм╕рнНрмд рмжрм┐рмЧрмХрнБ рм╕рморнНрммрнЛрмзрми рмХрм░рм┐ рмПрмХ рммрм┐рм╕рнНрмдрнГрмд рмЙрмдрнНрмдрм░ рмкрнНрм░рмжрм╛рми рмХрм░рмирнНрмдрнБред
                5. рмпрмжрм┐ рмЖрмкрмг рмХрнМрмгрм╕рм┐ рммрм┐рм╖рнЯрм░рнЗ рмирм┐рм╢рнНрмЪрм┐рмд рмирнБрм╣рмБрмирнНрмдрм┐, рмдрнЗрммрнЗ рмЕрмирнБрморм╛рми рмХрм░рмирнНрмдрнБ рмирм╛рм╣рм┐рмБред рммрм░рмВ, рмЖрмкрмг рм╕рнЗрм╣рм┐ рммрм┐рм╖рнЯрм░рнЗ рмирм┐рм╢рнНрмЪрм┐рмд рмирнБрм╣рмБрмирнНрмдрм┐ рммрнЛрм▓рм┐ рмХрнБрм╣рмирнНрмдрнБред

                рмирм┐рморнНрмирм▓рм┐рмЦрм┐рмд рммрм╛рм╕рнНрмдрмм рм╕рморнЯ рм╕рмирнНрмзрм╛рми рм╕рнВрмЪрмирм╛рмХрнБ рмЖрмкрмгрмЩрнНрмХрм░ рмкрнНрм░рмдрм┐рмХрнНрм░рм┐рнЯрм╛рмХрнБ рммрнГрмжрнНрмзрм┐ рмХрм░рм┐рммрм╛рмХрнБ рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рмирнНрмдрнБ:
                {search_results}

                рмПрмХ рммрм┐рм╕рнНрмдрнГрмд рмПрммрмВ рм╕рнВрмЪрмирм╛рмдрнНрмормХ рмкрнНрм░рмдрм┐рмХрнНрм░рм┐рнЯрм╛ рмкрнНрм░рмжрм╛рми рмХрм░рмирнНрмдрнБ, рмкрнНрм░рм╛рнЯ 200-300 рм╢рммрнНрмж рм▓рмХрнНрм╖рнНрнЯ рм░рмЦрмирнНрмдрнБред рмирм┐рм╢рнНрмЪрм┐рмд рмХрм░рмирнНрмдрнБ рмпрнЗ рмЖрмкрмгрмЩрнНрмХрм░ рмЙрмдрнНрмдрм░ рммрнНрнЯрм╛рмкрмХ рмПрммрмВ рммрнНрнЯрммрм╣рм╛рм░рмХрм╛рм░рнАрмЩрнНрмХ рмкрнНрм░рм╢рнНрмирм░ рм╕рморм╕рнНрмд рмжрм┐рмЧрмХрнБ рм╕рморнНрммрнЛрмзрми рмХрм░рнЗред рм╕рм░рнНрммрмжрм╛ рмПрмХ рм╕рморнНрмкрнВрм░рнНрмгрнНрмг рмкрнНрм░рмдрм┐рмХрнНрм░рм┐рнЯрм╛ рмкрнНрм░рмжрм╛рми рмХрм░рмирнНрмдрнБред"""
            
            # print("System Prompt:")  # Debug print
            # print(system_prompt)  # Debug print
            
            try:
                chat_completion = client.chat.completions.create(
                    messages=[
                        {"role": "system", "content": system_prompt},
                        *messages
                    ],
                    model=st.session_state["groq_model"],
                    max_tokens=2048,
                    temperature=0.7,
                    top_p=0.9,
                )
                
                response = chat_completion.choices[0].message.content
                # print("Groq Response:")  # Debug print
                # print(response)  # Debug print
                
                if response:
                    st.markdown(response)
                    play_audio = st.button("ЁЯЧг Play Audio", on_click=play_audio, args=(response,))
                    st.session_state.messages.append({"role": "assistant", "content": response})
                else:
                    st.error("The AI model returned an empty response. Please try again.")
            except Exception as e:
                st.error(f"An error occurred while generating the response: {str(e)}")
                print(f"Error details: {e}")  # Debug print